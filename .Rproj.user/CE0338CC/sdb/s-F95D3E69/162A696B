{
    "collab_server" : "",
    "contents" : "\n#----------------------------------------#\n#------------    Funciones    -----------#\n#----------------------------------------#\n\nlibrary(\"lmtest\")\nlibrary(\"sandwich\")\nlibrary('tidyverse')\nlibrary(\"ggplot2\")\n\noptions(scipen=10000000)\n\nresultados = function(results, CI, obs, req_observaciones, treatments, treatment_variable, control_group_label, factor_mult = 100){\n\n  num_treats = length(treatments)\n\n  res = data.frame(treatment = array(0, dim=c(num_treats+1)),\n                   teffect = array(0, dim=c(num_treats+1)),\n                   pvalues = array(0, dim=c(num_treats+1)),\n                   sd = array(0, dim=c(num_treats+1)),\n                   CIl = array(0, dim=c(num_treats+1)),\n                   CIh = array(0, dim=c(num_treats+1)),\n                   obs = array(0, dim=c(num_treats+1)),\n                   req_obs = array(0, dim=c(num_treats+1)))\n\n  for(i in 1:num_treats){\n    treat = treatments[i]\n    rowname = paste0(\"factor(\", treatment_variable, \")\", treat)\n\n    res$teffect[i+1]   = round(factor_mult*results[rowname,1], 3)\n    res$pvalues[i+1]   = round(results[rowname,4], 3)\n    res$treatment[i+1] = treat\n    res$sd[i+1]        = round(results[rowname,2], 3)\n    res$CIl[i+1]       = round(factor_mult*CI[rowname,1], 3)\n    res$CIh[i+1]       = round(factor_mult*CI[rowname,2], 3)\n    res$obs[i+1]       = obs[1, as.character(treat)]\n    res$req_obs[i+1]   = req_observaciones[1, as.character(treat)]\n  }\n\n  res$teffect[1]   = round(factor_mult*results[\"(Intercept)\",1], 3)\n  res$pvalues[1]   = \"-\"\n  res$treatment[1] = control_group_label\n  res$sd[1]        = \"-\"\n  res$CIl[1]       = \"-\"\n  res$CIh[1]       = \"-\"\n  res$obs[1]       = obs[1, control_group_label]\n  res$req_obs[1]   = \"-\"\n\n  res[2:(num_treats + 1),] = res[2:(num_treats + 1),][order(res[2:(num_treats + 1),]$treatment),]\n\n  return(res)\n}\n\ngrafico_res = function(num_treats, result_data, obs, labels, titulo, axistitle, n_power, power_constraint, add_legend = FALSE){\n\n  result_data$color = \"\"\n  if(power_constraint == TRUE){\n    try(result_data[as.double(result_data$pvalues) <= 0.05 & as.double(gsub(\",\", \"\", result_data$obs)) < as.double(gsub(\",\", \"\", result_data$req_obs)),]$color <- \"significative\", silent=TRUE)\n    try(result_data[as.double(result_data$pvalues) <= 0.05 & as.double(gsub(\",\", \"\", result_data$obs)) >= as.double(gsub(\",\", \"\", result_data$req_obs)),]$color <- \"significative_conf\", silent=TRUE)\n    try(result_data[as.double(result_data$CIl) <= 0 & as.double(result_data$CIh) >= 0 & as.double(gsub(\",\", \"\", result_data$obs)) >= n_power,]$color <- \"non_sign\", silent=TRUE)\n    try(result_data[as.double(result_data$CIl) <= 0 & as.double(result_data$CIh) >= 0  & as.double(gsub(\",\", \"\", result_data$obs)) < n_power,]$color <- \"non_sign_power\", silent=TRUE)\n  } else{\n    try(result_data[as.double(result_data$pvalues) <= 0.05,]$color <- \"significative_conf\", silent=TRUE)\n    try(result_data[as.double(result_data$CIl) <= 0 & as.double(result_data$CIh) >= 0,]$color <- \"non_sign\", silent=TRUE)\n  }\n\n  graph = ggplot(result_data,\n                 aes(x = factor(treatment),\n                     y = teffect,\n                     fill = color)) +\n    geom_bar(stat=\"identity\",\n             position=position_dodge()) +\n    geom_errorbar(aes(ymin=(as.double(CIl)), ymax=(as.double(CIh))), width=.2,\n                  position=position_dodge(.9)) +\n    theme_minimal() +\n    geom_hline(yintercept = 0, color = 'black', size = 1) +\n    xlab(\"\") + ylab(axistitle) + theme(plot.title = element_text(hjust=0.5)) +\n    scale_x_discrete(breaks=result_data$treatment,\n                     labels=labels) + ggtitle(titulo) +\n    scale_y_continuous(labels = function(x) format(x, big.mark = \",\", scientific = FALSE))\n\n  if(add_legend == FALSE){\n    graph = graph + theme(legend.position = 'none')\n  }\n\n  if(power_constraint == FALSE){\n    graph = graph +\n      scale_fill_manual(name = \"Significance:\",\n                        values=c(\"significative_conf\" = \"red\",\n                                 \"non_sign\" = \"grey50\"),\n                        labels=c(\"significative_conf\" = \"Significant\",\n                                 \"non_sign\" = \"Not significant\"))\n  } else{\n    graph = graph +\n      scale_fill_manual(name = \"Significance:\",\n                        values=c(\"significative\" = \"orange\",\n                                 \"significative_conf\" = \"red\",\n                                 \"non_sign_power\" = \"lightblue\",\n                                 \"non_sign\" = \"grey50\"),\n                        labels=c(\"significative\" = \"Significant - low precision\",\n                                 \"significative_conf\" = \"Significant - high precision\",\n                                 \"non_sign_power\" = \"Not significant - more obs required\",\n                                 \"non_sign\" = \"Not significant\"))\n  }\n\n  return(graph)\n}\n\ntabla_res = function(num_treats, result_data, df){\n  names(result_data) = c(\"Tratamiento\", \"Efecto\", \"p-valor\", \"Desv. Est\", \"IC-botom\", \"IC-top\", \"Obs.\")\n\n  g = tableGrob(result_data, rows = NULL)\n  g = gtable_add_grob(g, grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)), t = 2, b = nrow(g), l = 1, r = ncol(g))\n  g = gtable_add_grob(g, grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)), t = 1, l = 1, r = ncol(g))\n\n  return(g)\n\n}\n\nconfint.robust <- function (object, parm, level = 0.95, ...){\n  cf <- coef(object)\n  pnames <- names(cf)\n  if (missing(parm))\n    parm <- pnames\n  else if (is.numeric(parm))\n    parm <- pnames[parm]\n  a <- (1 - level)/2\n  a <- c(a, 1 - a)\n  pct <- stats:::format.perc(a, 3)\n  fac <- qnorm(a)\n  ci <- array(NA, dim = c(length(parm), 2L), dimnames = list(parm,\n                                                             pct))\n  ses <- sqrt(diag(sandwich::vcovHC(object, type=\"HC1\")))[parm]\n  ci[] <- cf[parm] + ses %o% fac\n  ci\n}\n\nregression_table = function(dataframe,\n                            titulo,\n                            dependent,\n                            treatment_variable = \"treatment\",\n                            controls = c(),\n                            treatment_labels,\n                            control_group_label,\n                            factor_mult = 100,\n                            subtitulos = c(),\n                            axistitle = \"Puntos porcentuales\",\n                            significance_level = 0.95,\n                            power_constraint = FALSE,\n                            power_value = NA,\n                            power_delta = NA,\n                            power_sd = NA,\n                            tolerance_level = 0.0005,\n                            tolerance_perc = 0.95,\n                            robust_se = TRUE){\n\n  if(power_constraint == TRUE){\n    n_power = power.t.test(power=power_value,\n                           delta=power_delta,\n                           sd=power_sd,\n                           type=\"two.sample\",\n                           sig.level = significance_level)$n\n  } else{\n    n_power = 0\n  }\n\n  if( any(treatment_labels == '') ) stop('The treatment has empty values.')\n\n  control_group_label = as.character(control_group_label)\n\n  treatments = setdiff(treatment_labels, control_group_label)\n  num_treats = length(treatments)\n\n  # Output\n  output = data.frame(treatment = array(0, dim=c(num_treats+1)), teffect = array(0, dim=c(num_treats+1)),\n                      pvalues = array(0, dim=c(num_treats+1)), sd = array(0, dim=c(num_treats+1)),\n                      CIl = array(0, dim=c(num_treats+1)), CIh = array(0, dim=c(num_treats+1)), obs = array(0, dim=c(num_treats+1)))\n\n  labels = array(\"\", dim = c(num_treats))\n\n  data = dataframe %>% select(c(dependent, treatment_variable, controls))\n  data[[treatment_variable]] = factor(data[[treatment_variable]])\n  data = na.omit(data)\n\n  # Set base to control variable\n  data[[treatment_variable]] = relevel(data[[treatment_variable]], ref = control_group_label)\n\n  # Regresion: outcome vs treatment y controles\n\n  controls_factors = c(\"day\", \"prime\", \"dapa\", \"bapa\", \"platform\", \"segment\", \"churn\", \"maturity\", \"gama\")\n\n  controls_with_factors = controls\n  for(j in 1:length(controls_factors)){\n    if(sum(controls_factors[j] == controls_with_factors) == 1){\n      controls_with_factors[controls_factors[j] == controls_with_factors] = paste0(\"factor(\", controls_factors[j],\")\")\n    }\n  }\n\n  if(length(controls_with_factors)>0){\n    model = lm(as.formula(paste(dependent, \"~ factor(\", treatment_variable, \") + \", paste(controls_with_factors, collapse=\" + \"))), data = data)\n  } else{\n    model = lm(as.formula(paste(dependent, \"~ factor(\", treatment_variable, \")\")), data = data)\n  }\n\n  results = coeftest(model, vcov = vcovHC(model, type=\"HC1\"))\n\n  if(robust_se == TRUE){\n    CI = confint.robust(model, level = significance_level)\n  } else{\n    CI = confint(model, level = significance_level)\n  }\n\n  observaciones = array(0, dim=c(1,(num_treats+1)))\n  colnames(observaciones) = c(as.character(control_group_label), as.character(sort(treatments)))\n\n  req_observaciones = array(0, dim=c(1,(num_treats)))\n  colnames(req_observaciones) = as.character(sort(treatments))\n\n  labels = array(\"\", dim=c(1,num_treats))\n  colnames(labels) = sort(treatments)\n\n  for(j in 1:num_treats){\n    observaciones[1,as.character(treatments[j])] = format(sum(data[[treatment_variable]] == treatments[j]), big.mark=\",\")\n\n    # Labels for graph\n    if(length(subtitulos) > 0){\n      labels[1, as.character(treatments[j])] = paste(subtitulos[j], \"\\n\\nN=\", observaciones[1,as.character(treatments[j])])\n    } else{\n      labels[1, as.character(treatments[j])] = paste(treatments[j], \"\\n\\nN=\", observaciones[1,as.character(treatments[j])])\n    }\n\n    # Observaciones requeridas para estimador confiable\n    s = sd(data[data[[treatment_variable]] == treatments[j], ][[dependent]])\n    req_observaciones[1, as.character(treatments[j])] = format(round(((1.96*s)/tolerance_level)^2), big.mark=\",\")\n\n  }\n  observaciones[1,control_group_label] = format(sum(data[[treatment_variable]] == control_group_label), big.mark=\",\")\n\n  output = resultados(results, CI, observaciones, req_observaciones, treatments, treatment_variable, control_group_label, factor_mult)\n\n  ggraph = grafico_res(num_treats, output[2:(num_treats+1),], observaciones, labels, titulo, axistitle, n_power, power_constraint)\n\n  return(list(output, ggraph))\n}\n",
    "created" : 1569526207765.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2695620984",
    "id" : "162A696B",
    "lastKnownWriteTime" : 1569531959,
    "last_content_update" : 1569531959993,
    "path" : "~/Dropbox/Documents/Rappi/AB testing/regression_functions_final.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}